package Day07;

// ---- 대입연산자 ----
// =: 왼쪽의 피연산자에 오른쪽의 피연산자를 대입.
// 
// ---- 복합 대입 연산자 ----
// +=: 왼쪽의 피연산자에 오른쪽의 피연산자에 더한 후 대입.
// -=: 왼쪽의 피연산자에 오른쪽의 피연산자를 뺀 후 대입.
// *=: 왼쪽의 피연산자에 오른쪽의 피연산자를 곱한 후 대입.
// /=: 왼쪽의 피연산자에 오른쪽의 피연산자를 나눈 후 대입.
// %=: 왼쪽의 피연산자에 오른쪽의 피연산자를 나눈 후 나머지를 대입.
// 
// ---- 증감 연산자 ----
// 피연산자가 1개.
// 위치에 따라 증갑하는 시점이 달라짐
// ++num : 전위 증가 연산자. 피연산자의 값을 1 증가시킨 뒤 연산을 진행.
// num++ : 후위 증가 연산자. 연산을 진행한 뒤 피연산자의 값을 1 증가시킴.
// --num : 전위 감소 연산자. 피연산자의 값을 감소시킨 뒤 연산을 진행.
// num++ : 후위 감소 연산자. 연산을 진행한 뒤 피연산자의 값을 1 감소시킴.
//

// ---- 비교 연산자 ----
// 연산의 결과가 참이면 True, 거짓이면 False 값을 반환한다. (boolean 타입)
// ==: 왼쪽의 피연산자와 오른쪽의 피연산자가 같으면 True 를 반환.
// !=: 왼쪽의 피연산자와 오른쪽의 피연산자가 다르면 True 를 반환.
// >: 왼쪽의 피연산자가 오른쪽의 피연산자보다 크면 True 를 반환.
// >=: 왼쪽의 피연산자가 오른쪽의 피연산자보다 크거나 같으면 True 를 반환.
// <: 왼쪽의 피연산자가 오른쪽의 피연산자보다 작으면 True 를 반환.
// <=: 왼쪽의 피연산자가 오른쪽의 피연산자보다 작거나 같으면 True 를 반환.
// 


public class Operators02 {
    public static void main(String[] args) {
        int num1 = 8;
        System.out.println("num1 = " + num1);

        num1 += 7;
        System.out.println("num1 += 7 : " + num1);

        num1 -= 6;
        System.out.println("num1 -= 6 : " + num1);

        num1 *= 5;
        System.out.println("num1 *= 5 : " + num1);

        num1 /=4;
        System.out.println("num1 /= 4 : " + num1);
        
        num1 %=3;
        System.out.println("num1 %= 3 : " + num1);

        int n1=6, n2=5, n3;
        System.out.printf("초기조건| n1: %d n2: %d\n", n1, n2);
        n3 = n1++ + ++n2;

        System.out.printf("계산결과| n1: %d n2: %d n3: %d\n", n1, n2, n3);

    }
}
