package Day08;

// ---- 비트 ---- 
// 컴퓨터의 가장 작은 단위 bit.
//  - 1bit 에는 2진수 숫자 하나를 저장할 수 있다.
// 프로그래밍에서 사용하는 기본 단위 byte.
//  - 1byte에는 8개의 bit가 들어간다. 1byte == 8bit
// 
// Q1) 다음 2진수를 10진수로 변환해보세요.
// 0000 0011 | 00001011 | 00011000

// ---- 비트 쉽게 계산하는법 ----
// 해당 숫자에서 가장 가까운 2의 제곱수를 찾아서 2진수의 자릿수를 올리고 해당 숫자에서 뺀다.
// 이 과정을 0이 될때까지 반복한다.
// 예를 들어... 215
// 1. 215 에서 가까운 2의 제곱수: 128   | 215 - 128 = 87    -> 1000 0000
// 2. 87 에서 가까운 2의 제곱수: 64     | 87 - 64 = 23      -> 1010 0000
// 3. 23 에서 가까운 2의 제곱수: 16     | 23 - 16 = 7       -> 1010 1000
// 4. 7 에서 가까운 2의 제곱수: 4       | 7 - 4 = 3         -> 1010 1100
// 5. 3 에서 가까운 2의 제곱수: 2       | 3 - 2 = 1         -> 1010 1110
// 6. 1 에서 가까운 2의 제곱수: 1       | 1 - 1 = 0         -> 1010 1111
// => 215 = 1010 1111

// ---- 8진수, 16진수 쉽게 계산하는법 ----
// 2진수 각 자리를 8진수는 3자리, 16진수는 4자리씩 끊어서 계산하면 됨
// 예를 들어... 0011 1110
// 8진수는 00 111 110 으로 계산하여 각 자리를 치환하면 됨: 076
// 16진수는 0011 1110 으로 계산하여 각 자리를 치환하면 됨: 3E
// 

// Q2) 해당 10진수들을 각각의 진수로 표현해보세요
//  값  |   2진수   |    8진수   |   16진수  |
// ------------------------------
//  10  | 0000 1010 |    12     |     A     | 
//  35  | 0010 0011 |    43     |    23     |
//  46  | 0010 1110 |    56     |    2E     | 
//  31  | 0001 1111 |    37     |    1F     |
//  62  | 0011 1110 |    36     |    3E     |
//  255 | 1111 1111 |    377    |    FF     |
// 



public class Operators04 {
    public static void main(String[] args) {
        int b1 = (byte)00000011;
        int b2 = (byte)00001011;
        int b3 = (byte)00011000;
        System.out.printf("b1: %d, b2: %d, b3: %d", b1, b2, b3);
        
    }
}
